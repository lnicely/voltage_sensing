buffer[0] + (buffer[1] & 3) << 8;
Depending on the endienness of the hardware, it could also be:
buffer[0] << 8 + (buffer[1] & 3);
If this isn't correct, will you send an example 3 bytes that are read from the hardware, and which bits you expect to get back? It might be helpful to sketch out how memory and bits are represented in memory





#include <iostream>


unsigned int getLastBits(char* buffer, int numChars, int numBits)
{
for (int i = 0; i < numChars; ++i)
{
std::cout << i << ": " << static_cast<int>(buffer[i]) << std::endl;
}

// original
//return ( (buffer[0] & 3 ) << 8) + buffer[1]; // get last 10 bits

// using the character array {'a', 'b', 'c'} as an example
// 'a': 01100001
// 'b': 01100010
// 'c': 01100011

// if the first char in the array is the "end" of the number,
// shifting 'a' and adding 2 left most bits in 'b' by masking:
//    01100001 00000000 + 01000000
// and then shifting off the extra 6 bits
//    01100001 01
return ((buffer[0] << 8) + (buffer[1] & 192)) >> 6;
}

void printBits(unsigned int number)
{
std::cout << "printBits " << number << std::endl;
for(int bit = (sizeof(unsigned int) * 8)-1; bit>-1; bit--)
{
printf("%i", (number >> bit) & 0x01);
}
std::cout << std::endl;
}

int main(int argc, char ** argv)
{
  //std::cout << "testing myAnalogRead " << myAnalogRead(1, 2, 3) << std::endl;

printBits(1);
printBits(5);
printBits(13);
printBits(1 << 1);
printBits(1 << 2);
printBits(1 << 3);
printBits(1 << 4);
printBits(1 << 5);
printBits(1 << 6);
printBits(1 << 7);
printBits(1 << 8);
printBits(1 << 9);
printBits(11);
printBits(88);
printBits(32769u);
printBits(6382179);

int n = 1;
if(*(char *)&n == 1) { std::cout << "little" << std::endl; }
else { std::cout << "big" << std::endl; }

// in hex: 61, 62, 63
char buffer[3] = {'a', 'b', 'c'};

printBits(getLastBits(buffer, 3, 10));
}

